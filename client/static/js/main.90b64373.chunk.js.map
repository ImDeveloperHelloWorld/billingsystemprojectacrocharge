{"version":3,"sources":["redux/action-type.ts","models/UserLoginDetails.ts","components/login/login.tsx","models/Customer.ts","components/createCustomer/createCustomer.tsx","redux/app-state.ts","redux/store.ts","redux/reducer.ts","models/Transaction.ts","components/createTransaction/createTransaction.tsx","components/customerstr/customertr.tsx","components/customersMap/Marker.tsx","components/customersMap/customersMap.tsx","components/customers/customers.tsx","models/EditCustomerDetails.ts","components/editCustomer/editCustomer.tsx","models/EditTransactionDetails.ts","components/editTransaction/editTransaction.tsx","components/pagenotfound/pagenotfound.tsx","components/transactiontr/transactiontr.tsx","components/transactions/transactions.tsx","components/layout/layout.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","UserLoginDetails","userName","password","Login","props","setUserName","args","target","value","length","classList","add","setErrorMessage","remove","setErrorToNull","setState","setPassword","login","a","state","userLoginDetails","axios","post","response","userToken","defaults","headers","common","data","token","sessionStorage","setItem","history","push","console","log","errorMessage","err","this","className","type","placeholder","onChange","onClick","Component","Customer","id","firstName","lastName","email","gender","country","city","street","phone","totalTransactions","CreateCustomer","setFirstName","setLastName","setEmail","setGender","setCountry","setCity","setStreet","setPhone","createCustomer","customerDetails","JSON","parse","getItem","alert","onFocus","defaultValue","name","disabled","to","store","createStore","oldAppState","action","newAppState","isLoggedIn","Logout","GetAllTransactions","transactions","payload","GetAllCustomers","customers","GetAllCoordinates","coordinates","DESTROY_SESSION","Transaction","totalPrice","currency","creditCardType","creditCardNumber","customerId","CreateTransaction","unsubscribeStore","setTotalPrice","parseInt","toString","setCurrency","setCreditCardType","setCreditCardNumber","setCustomerId","createTransaction","transactionDetails","subscribe","getState","dispatch","get","map","customer","index","CustomerTr","scope","onEditClicked","onEditClickedNavigate","onDeleteClicked","Marker","style","backgroundColor","color","cursor","title","SimpleMap","center","lat","lng","zoom","height","width","margin","bootstrapURLKeys","key","defaultCenter","defaultZoom","coordinate","Customers","goToEditCustomer","parentElement","window","confirm","delete","message","replace","transformRequest","googleResponse","results","geometry","location","editCustomer","deleteCustomer","stringify","getLatAndLgn","EditCustomerDetails","EditCustomer","editCustomerDetails","put","customersArr","EditTransactionDetails","EditTransaction","setcreditCardType","setcreditCardNumber","editTransaction","editTransactionDetails","transactionsArr","PageNotFound","TransactionRr","Transactions","goToEditTransaction","transaction","deleteTransaction","Layout","path","component","exact","from","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90b64373.chunk.js","sourcesContent":["export enum ActionType {\r\n    GetAllTransactions,\r\n    GetAllCustomers,\r\n    GetAllCoordinates,\r\n    Login,\r\n    Logout,\r\n    DESTROY_SESSION\r\n}","export class UserLoginDetails{\r\n    public constructor(\r\n        public userName?:string,\r\n        public password?:string,\r\n    ){}\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport '../login/login.css';\r\nimport axios from \"axios\";\r\nimport { UserLoginDetails } from '../../models/UserLoginDetails';\r\nimport { SuccessfulLoginServerResponse } from '../../models/SuccessfulLoginServerResponse';\r\n\r\ninterface LoginState {\r\n    userName: string,\r\n    password: string,\r\n    errorMessage: string\r\n}\r\n\r\nexport default class Login extends Component<any, LoginState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            userName: \"Admin\",\r\n            password: \"123456\",\r\n            errorMessage: \"\"\r\n        };\r\n    }\r\n\r\n    private setUserName = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        \r\n        const userName = args.target.value;\r\n        if(userName.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"User Name Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n\r\n        this.setState({ userName });\r\n    }\r\n\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        if(password.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Password Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ password });\r\n    }\r\n\r\n    private setErrorMessage(err: string) {\r\n\r\n        let errorMessage = err;\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private setErrorToNull() {\r\n\r\n        let errorMessage = \"\";\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private login = async () => {\r\n        try {\r\n\r\n            if (this.state.userName.length <= 0 || this.state.password.length <= 0) {\r\n                this.setErrorMessage(\"One Or More Of Your Field Are Empty\");\r\n                return;\r\n            }\r\n\r\n            // Create user object with userName and userPassword\r\n            let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n            // Send request with user details\r\n            const response = await axios.post<SuccessfulLoginServerResponse>(\"http://localhost:3001/users/\", userLoginDetails);\r\n            this.setErrorToNull();\r\n            // Set token from response as default in header request\r\n            const userToken = axios.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.token;\r\n            // Save token on sessionStorage\r\n            sessionStorage.setItem(\"userToken\", userToken);\r\n            sessionStorage.setItem(\"isLoggedIn\", \"true\");\r\n            this.props.history.push('/transactions');\r\n\r\n\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <form>\r\n                        <h3>Sign In To Billing System</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>User Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter user name\" value={this.state.userName} onChange={this.setUserName} />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" value={this.state.password} onChange={this.setPassword} />\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.login}>Login</button>\r\n\r\n                    </form>\r\n                    <br />\r\n                    <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","export class Customer{\r\n    public constructor(\r\n        public id?:number,\r\n        public firstName?:string,\r\n        public lastName?:string,\r\n        public email?:string,\r\n        public gender?: string,\r\n        public country?: string,\r\n        public city?: string,\r\n        public street?: string,\r\n        public phone?: string,\r\n        public totalTransactions?: string\r\n                 \r\n    ){}\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Customer } from '../../models/Customer';\r\n\r\n\r\ninterface CreateCustomerState {\r\n    firstName?: string,\r\n    lastName?: string,\r\n    email?: string,\r\n    gender?: string,\r\n    country?: string,\r\n    city: string,\r\n    street: string,\r\n    phone: string,\r\n    errorMessage: string\r\n}\r\n\r\nexport default class CreateCustomer extends Component<any, CreateCustomerState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            gender: \"\",\r\n            country: \"\",\r\n            city: \"\",\r\n            street: \"\",\r\n            phone: \"\",\r\n            errorMessage: \"\"\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private setFirstName = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const firstName = args.target.value;\r\n        if(firstName.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"First Name Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ firstName });\r\n    }\r\n\r\n    private setLastName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n        if(lastName.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Last Name Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ lastName });\r\n    }\r\n    private setEmail = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const email = args.target.value;\r\n        if(email.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Email Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ email });\r\n    }\r\n    private setGender = (args: ChangeEvent<HTMLSelectElement>) => {\r\n        const gender = args.target.value;\r\n        if(gender.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Gender Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ gender });\r\n    }\r\n\r\n    private setCountry = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const country = args.target.value;\r\n        if(country.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Country Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ country });\r\n    }\r\n\r\n    private setCity = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const city = args.target.value;\r\n        if(city.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"City Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ city });\r\n    }\r\n\r\n    private setStreet = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const street = args.target.value;\r\n        if(street.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Street Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ street });\r\n    }\r\n\r\n    private setPhone = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const phone = args.target.value;\r\n        if(phone.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Phone Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ phone });\r\n    }\r\n\r\n    private setErrorMessage(err: any) {\r\n\r\n        let errorMessage = err;\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private setErrorToNull() {\r\n\r\n        let errorMessage = \"\";\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private createCustomer = async () => {\r\n\r\n        if (\r\n            this.state.firstName.length <= 0 ||\r\n            this.state.lastName.length <= 0 ||\r\n            this.state.email.length <= 0 ||\r\n            this.state.gender.length <= 0 ||\r\n            this.state.country.length <= 0 ||\r\n            this.state.city.length <= 0 ||\r\n            this.state.street.length <= 0 ||\r\n            this.state.phone.length <= 0) {\r\n            this.setErrorMessage(\"One Or More Of Your Field Are  Empty\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let customerDetails = new Customer(null, this.state.firstName, this.state.lastName, this.state.email, this.state.gender, this.state.country, this.state.city, this.state.street, this.state.phone);\r\n            let response = await axios.post(\"http://localhost:3001/customers\", customerDetails);\r\n            this.setErrorMessage(response.data);\r\n\r\n        }\r\n        catch (err) {\r\n            this.setErrorMessage(err);\r\n\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n\r\n            this.setErrorToNull();\r\n\r\n        } else {\r\n            alert(\"Access Denied\");\r\n            this.props.history.push('/home');\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <form>\r\n                        <h3>Create Transaction</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter First Name\" value={this.state.firstName} onChange={this.setFirstName} onFocus={this.setFirstName}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Last Name\" value={this.state.lastName} onChange={this.setLastName} onFocus={this.setLastName}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Enter Email\" value={this.state.email} onChange={this.setEmail} onFocus={this.setEmail}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Gender</label>\r\n                            <select className=\"form-control\" defaultValue={'DEFAULT'} onChange={this.setGender} onFocus={this.setGender}name=\"currency\" id=\"currency\" >\r\n                                <option value=\"DEFAULT\" disabled>--Please Select Gender--</option>\r\n                                <option value=\"Male\">Male</option>\r\n                                <option value=\"Female\">Female</option>\r\n\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Country</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Country\" value={this.state.country} onChange={this.setCountry} onFocus={this.setCountry}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>City</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter City\" value={this.state.city} onChange={this.setCity} onFocus={this.setCity}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Street</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Street\" value={this.state.street} onChange={this.setStreet} onFocus={this.setStreet}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Phone</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Phone Number\" value={this.state.phone} onChange={this.setPhone} onFocus={this.setPhone}/>\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.createCustomer} >Create Customer</button>\r\n\r\n                    </form>\r\n                    <NavLink className=\"backButton\" to=\"/customers\"></NavLink>\r\n\r\n\r\n\r\n                    <br />\r\n                    <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import { Transaction } from \"../models/Transaction\";\r\nimport { Customer } from \"../models/Customer\";\r\nimport { Coordinate } from \"../models/Coordinate\";\r\n\r\nexport class AppState {\r\n    public transactions: Transaction[] = [];\r\n    public customers: Customer[] = [];\r\n    public coordinates: Coordinate[] = [];\r\n    public isLoggedIn: boolean = false;\r\n}","import { createStore } from \"redux\";\r\nimport { reduce } from \"./reducer\";\r\nimport { AppState } from \"./app-state\";\r\n\r\nexport const store = createStore(reduce, new AppState());","import { AppState } from \"./app-state\";\r\nimport { ActionType } from \"./action-type\";\r\nimport { Action } from \"./action\";\r\n\r\n// This function is NOT called direcrtly by you\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n    // Cloning the oldState (creating a copy)\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.Login:\r\n            newAppState.isLoggedIn = true;\r\n            break;\r\n\r\n        case ActionType.Logout:\r\n            newAppState.isLoggedIn = false;\r\n            break;\r\n\r\n        case ActionType.GetAllTransactions:\r\n            newAppState.transactions = action.payload;\r\n            break;\r\n\r\n        case ActionType.GetAllCustomers:\r\n            newAppState.customers = action.payload;\r\n            break;\r\n\r\n        case ActionType.GetAllCoordinates:\r\n            newAppState.coordinates = action.payload;\r\n            break;\r\n    \r\n        case ActionType.DESTROY_SESSION:\r\n            newAppState.isLoggedIn = false;\r\n            newAppState.transactions = [];\r\n            break;\r\n    }\r\n\r\n    // After returning the new state, it's being published to all subscribers\r\n    // Each component will render itself based on the new state\r\n    return newAppState;\r\n}","export class Transaction{\r\n    public constructor(\r\n        public id?:number,\r\n        public totalPrice?:number,\r\n        public currency?:string,\r\n        public creditCardType?:string,\r\n        public creditCardNumber?: string,\r\n        public customerId?: number\r\n                 \r\n    ){}\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Customer } from '../../models/Customer';\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { Transaction } from '../../models/Transaction';\r\n\r\ninterface CreateTransactionState {\r\n    totalPrice?: number,\r\n    currency?: string,\r\n    creditCardType?: string,\r\n    creditCardNumber?: string,\r\n    customerId?: string,\r\n    customers: Customer[]\r\n    errorMessage: string\r\n}\r\n\r\nexport default class CreateTransaction extends Component<any, CreateTransactionState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: 0,\r\n            currency: \"\",\r\n            creditCardType: \"\",\r\n            creditCardNumber: \"\",\r\n            errorMessage: \"\",\r\n            customerId: \"\",\r\n            customers: []\r\n\r\n\r\n\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(\r\n\r\n            () => this.setState(\r\n                {\r\n                    customers: store.getState().customers\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private setTotalPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const totalPrice = parseInt(args.target.value);\r\n        if(totalPrice.toString() === \"\"){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Total Price Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ totalPrice });\r\n    }\r\n\r\n    private setCurrency = (args: ChangeEvent<HTMLSelectElement>) => {\r\n        const currency = args.target.value;\r\n        this.setState({ currency });\r\n    }\r\n    private setCreditCardType = (args: ChangeEvent<HTMLSelectElement>) => {\r\n        const creditCardType = args.target.value;\r\n        this.setState({ creditCardType });\r\n    }\r\n    private setCreditCardNumber = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const creditCardNumber = args.target.value;\r\n        if(creditCardNumber.toString() === \"\"){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Credit Card Number Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ creditCardNumber });\r\n    }\r\n\r\n    private setCustomerId = (args: ChangeEvent<HTMLSelectElement>) => {\r\n\r\n        const customerId = args.target.value;\r\n        this.setState({ customerId });\r\n    }\r\n\r\n    private setErrorMessage(err: any) {\r\n\r\n        let errorMessage = err;\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private setErrorToNull() {\r\n\r\n        let errorMessage = \"\";\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private createTransaction = async () => {\r\n\r\n        if (\r\n            this.state.totalPrice.toString().length <= 0 ||\r\n            this.state.currency.length <= 0 ||\r\n            this.state.creditCardType.length <= 0 ||\r\n            this.state.creditCardNumber.length <= 0) {\r\n            this.setErrorMessage(\"One Or More Of Your Field Are  Empty\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let transactionDetails = new Transaction(null, this.state.totalPrice, this.state.currency, this.state.creditCardType, this.state.creditCardNumber, parseInt(this.state.customerId));\r\n            let response = await axios.post(\"http://localhost:3001/transactions\", transactionDetails);\r\n            this.setErrorMessage(response.data);\r\n\r\n        }\r\n        catch (err) {\r\n            this.setErrorMessage(err);\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeStore();\r\n        store.dispatch({ type: ActionType.DESTROY_SESSION });\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n            const response = await axios.get<Customer[]>(\"http://localhost:3001/customers\");\r\n            store.dispatch({ type: ActionType.GetAllCustomers, payload: response.data });\r\n\r\n            this.setErrorToNull();\r\n\r\n        } else {\r\n            alert(\"Access Denied\");\r\n            this.props.history.push('/home');\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <form>\r\n                        <h3>Create Transaction</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Total Price</label>\r\n                            <input type=\"number\" className=\"form-control\" placeholder=\"Enter Total Price\" value={this.state.totalPrice} onChange={this.setTotalPrice} onFocus={this.setTotalPrice}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Currency</label>\r\n                            <select className=\"form-control\" defaultValue={'DEFAULT'} onChange={this.setCurrency} onFocus={this.setCurrency}name=\"currency\" id=\"currency\" >\r\n                                <option value=\"DEFAULT\" disabled>--Please Select Currency--</option>\r\n                                <option value=\"NIO\">NIO</option>\r\n                                <option value=\"IDR\">IDR</option>\r\n                                <option value=\"CUP\">CUP</option>\r\n                                <option value=\"CNY\">CNY</option>\r\n\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Cerdit Card Type</label>\r\n                            <select className=\"form-control\" defaultValue={'DEFAULT'} onChange={this.setCreditCardType} onFocus={this.setCreditCardType}name=\"creditCardType\" id=\"creditCardType\" >\r\n\r\n                                <option value=\"DEFAULT\" disabled>--Please Select Credit Card Type--</option>\r\n                                <option value=\"mastercard\">mastercard</option>\r\n                                <option value=\"visa-electron\">visa-electron</option>\r\n                                <option value=\"jcb\">jcb</option>\r\n                                <option value=\"visa\">visa</option>\r\n\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Cerdit Card Number</label>\r\n                            <input type=\"number\" className=\"form-control\" placeholder=\"Enter Credit Card Number\" value={this.state.creditCardNumber} onChange={this.setCreditCardNumber} onFocus={this.setCreditCardNumber}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Customer Ids</label>\r\n                            <select className=\"form-control\" defaultValue={'DEFAULT'} onChange={this.setCustomerId} onFocus={this.setCustomerId}name=\"customerIds\" id=\"customerIds\" >\r\n                                <option value={\"DEFAULT\"} disabled>--Please Select CustomerId--</option>\r\n\r\n                                {\r\n                                    this.state.customers.map((customer, index) =>\r\n\r\n                                        <option key={index} value={customer.id}>{customer.id}</option>\r\n\r\n                                    )\r\n                                }\r\n                            </select>\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.createTransaction}>Create Transaction</button>\r\n\r\n                    </form>\r\n                    <NavLink className=\"backButton\" to=\"/transactions\"></NavLink>\r\n\r\n\r\n\r\n                    <br />\r\n                    <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './customertr.css';\r\n\r\ninterface CustomerTrProps {\r\n    id: number,\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n    gender: string,\r\n    country: string,\r\n    city: string,\r\n    street: string,\r\n    phone: string,\r\n    totalTransactions: string,\r\n    index: number,\r\n    onEditClicked: any,\r\n    onDeleteClicked: any,\r\n    onEditClickedNavigate: any\r\n\r\n}\r\n\r\nexport default class CustomerTr extends Component<CustomerTrProps>{\r\n\r\n    public constructor(props: CustomerTrProps) {\r\n\r\n        super(props);\r\n    }\r\n\r\n\r\n    public render() {\r\n\r\n        return (\r\n\r\n            <tr id={this.props.id.toString()}>\r\n                <th scope=\"row\">{this.props.index}</th>\r\n                <td>{this.props.id}</td>\r\n                <td>{this.props.firstName}</td>\r\n                <td>{this.props.lastName}</td>\r\n                <td>{this.props.email}</td>\r\n                <td>{this.props.gender}</td>\r\n                <td>{this.props.country}</td>\r\n                <td>{this.props.city}</td>\r\n                <td>{this.props.street}</td>\r\n                <td>{this.props.phone}</td>\r\n                <td>{this.props.totalTransactions}</td>\r\n                <td>\r\n\r\n                    <label >\r\n                        <input className=\"deleteButton\" type=\"checkbox\" id={this.props.index.toString()} onChange={this.props.onEditClicked} onClick={this.props.onEditClickedNavigate} />\r\n                        <span className=\"editSpan\">\r\n                        </span>\r\n                    </label>\r\n                </td>\r\n\r\n                <td>\r\n                    <label >\r\n                        <input className=\"deleteButton\" type=\"checkbox\" onChange={this.props.onDeleteClicked} id={this.props.index.toString()} />\r\n                        <span className=\"deleteSpan\">\r\n                        </span>\r\n                    </label>\r\n\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport './Marker.css';\r\n\r\ninterface MarkerProps {\r\n    color: string;\r\n    name: string;\r\n    lat: any;\r\n    lng: any;\r\n}\r\n\r\nexport default class Marker extends Component<MarkerProps> {\r\n\r\n    // eslint-disable-next-line\r\n    constructor(props: MarkerProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"pin bounce\"\r\n                    style={{ backgroundColor: this.props.color, cursor: 'pointer' }}\r\n                    title={this.props.name}\r\n                />\r\n                <div className=\"pulse\" />\r\n            </div>\r\n        );\r\n\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from '../../redux/store';\r\nimport { Coordinate } from '../../models/Coordinate';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport Marker from './Marker';\r\n\r\n// Google Maps API\r\n//AIzaSyADeRdegtJGbkrudhffPHG6igwpDxSQ6t4\r\n\r\ninterface SimpleMapState {\r\n    coordinates: Coordinate[];\r\n    center: Coordinate\r\n    zoom: number\r\n}\r\n\r\n\r\n\r\nexport default class SimpleMap extends Component<any, SimpleMapState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            center: { lat: 31.890267, lng: 35.010397 },\r\n            zoom: 11,\r\n            coordinates: []\r\n        };\r\n        this.unsubscribeStore = store.subscribe(\r\n\r\n            () => this.setState(\r\n                {\r\n                    coordinates: store.getState().coordinates\r\n                })\r\n        );\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeStore();\r\n        store.dispatch({ type: ActionType.DESTROY_SESSION });\r\n    }\r\n\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div style={{ height: '500px', width: '1000px', margin: \"auto\" }}>\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: 'AIzaSyADeRdegtJGbkrudhffPHG6igwpDxSQ6t4' }}\r\n                    defaultCenter={{ lat: 11.0168, lng: 76.9558 }}\r\n                    defaultZoom={11}\r\n                >\r\n\r\n\r\n                    {this.state.coordinates.map((coordinate, index) =>\r\n\r\n                        <Marker\r\n                            key={index}\r\n                            lat={coordinate.lat}\r\n                            lng={coordinate.lng}\r\n                            name=\"My Marker\"\r\n                            color=\"blue\"\r\n                        />\r\n                    )}\r\n\r\n\r\n\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { Customer } from '../../models/Customer';\r\nimport { Coordinate } from '../../models/Coordinate';\r\nimport CustomerTr from '../customerstr/customertr'\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SimpleMap from '../customersMap/customersMap';\r\n\r\n\r\n\r\ninterface CustomerState {\r\n    customers: Customer[];\r\n    coordinates: Coordinate[];\r\n}\r\n\r\nexport default class Customers extends Component<any, CustomerState> {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            customers: [],\r\n            coordinates: []\r\n\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(\r\n\r\n            () => this.setState(\r\n                {\r\n                    customers: store.getState().customers\r\n                })\r\n        );\r\n\r\n    };\r\n\r\n    private goToEditCustomer = () => {\r\n        this.props.history.push('/editcustomer');\r\n    }\r\n\r\n    private editCustomer(args: ChangeEvent<HTMLInputElement>) {\r\n        sessionStorage.setItem(\"customerId\", args.target.parentElement.parentElement.parentElement.id);\r\n        sessionStorage.setItem(\"customerArrPosition\", args.target.id);\r\n\r\n    }\r\n\r\n    private async deleteCustomer(args: ChangeEvent<HTMLInputElement>) {\r\n\r\n        if (window.confirm('Are you sure you want to delete the selected customer?')) {\r\n            let message = await axios.delete(\"http://localhost:3001/customers/\" + args.target.parentElement.parentElement.parentElement.id);\r\n            const response = await axios.get<Customer[]>(\"http://localhost:3001/customers\");\r\n            store.dispatch({ type: ActionType.GetAllCustomers, payload: response.data });\r\n            window.confirm(message.data);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    private async getLatAndLgn(country: string, city: string, index: number) {\r\n\r\n        const googleResponse = await axios.get<any>(\"https://maps.googleapis.com/maps/api/geocode/json?address=\" + country.replace(/\\s/g, '+') + \",+\" + city.replace(/\\s/g, '+') + \"&key=AIzaSyADeRdegtJGbkrudhffPHG6igwpDxSQ6t4\", {\r\n            transformRequest: (data, headers) => {\r\n                delete headers.common['Authorization'];\r\n                return data;\r\n            }\r\n        });\r\n\r\n        this.state.coordinates.push(googleResponse.data.results[0].geometry.location);\r\n\r\n        if (this.state.coordinates.length <= index) {\r\n            store.dispatch({ type: ActionType.GetAllCoordinates, payload: this.state.coordinates });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table table-hover table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">CustomerId</th>\r\n                            <th scope=\"col\">First Name</th>\r\n                            <th scope=\"col\">Last Name</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Gender</th>\r\n                            <th scope=\"col\">Country</th>\r\n                            <th scope=\"col\">City</th>\r\n                            <th scope=\"col\">Street</th>\r\n                            <th scope=\"col\">Phone</th>\r\n                            <th scope=\"col\">Total Transactions</th>\r\n                            <th scope=\"col\">Edit User</th>\r\n                            <th scope=\"col\">Delete User</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {\r\n                            this.state.customers.map((customer, index) =>\r\n\r\n                                <CustomerTr\r\n                                    key={customer.id}\r\n                                    id={customer.id}\r\n                                    firstName={customer.firstName}\r\n                                    lastName={customer.lastName}\r\n                                    email={customer.email}\r\n                                    gender={customer.gender}\r\n                                    country={customer.country}\r\n                                    city={customer.city}\r\n                                    street={customer.street}\r\n                                    phone={customer.phone}\r\n                                    totalTransactions={customer.totalTransactions}\r\n                                    index={index}\r\n                                    onEditClicked={this.editCustomer}\r\n                                    onEditClickedNavigate={this.goToEditCustomer}\r\n                                    onDeleteClicked={this.deleteCustomer}\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n\r\n                <NavLink to=\"/createcustomer\">Create New Customer</NavLink>\r\n                <br />\r\n                <NavLink to=\"/transactions\">Transactions List</NavLink>\r\n                <div>\r\n                    <SimpleMap />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeStore();\r\n        store.dispatch({ type: ActionType.DESTROY_SESSION });\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n\r\n            // Get all transactions from database vacationtag table\r\n            const response = await axios.get<Customer[]>(\"http://localhost:3001/customers\");\r\n            // Set transactions on redux as array\r\n            sessionStorage.setItem(\"customersArr\", JSON.stringify(response.data));\r\n\r\n            store.dispatch({ type: ActionType.GetAllCustomers, payload: response.data });\r\n\r\n            this.state.customers.map((customer, index) => {\r\n\r\n                this.getLatAndLgn(customer.country, customer.city, index);\r\n                return true;\r\n            })\r\n\r\n\r\n        }\r\n    }\r\n}","export class EditCustomerDetails{\r\n    public constructor(\r\n        public id?:string,\r\n        public firstName?:string,\r\n        public lastName?:string,\r\n        public email?:string,\r\n        public gender?: string,\r\n        public country?: string,\r\n        public city?: string,\r\n        public street?: string,\r\n        public phone?: string\r\n                 \r\n    ){}\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { EditCustomerDetails } from '../../models/EditCustomerDetails';\r\nimport { Customer } from '../../models/Customer';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface EditCustomerState {\r\n    id?: string,\r\n    firstName?: string,\r\n    lastName?: string,\r\n    email?: string,\r\n    gender?: string,\r\n    country?: string,\r\n    city?: string,\r\n    street?: string,\r\n    phone?: string\r\n    errorMessage: string,\r\n    customers: Customer[]\r\n}\r\n\r\nexport default class EditCustomer extends Component<any, EditCustomerState>{\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            id: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            gender: \"\",\r\n            country: \"\",\r\n            city: \"\",\r\n            street: \"\",\r\n            phone: \"\",\r\n            errorMessage: \"\",\r\n            customers: []\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    private setFirstName = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const firstName = args.target.value;\r\n        if(firstName.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"First Name Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ firstName });\r\n    }\r\n\r\n    private setLastName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n        if(lastName.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Last Name Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ lastName });\r\n    }\r\n    private setEmail = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const email = args.target.value;\r\n        if(email.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Email Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ email });\r\n    }\r\n    private setGender = (args: ChangeEvent<HTMLSelectElement>) => {\r\n        const gender = args.target.value;\r\n        if(gender.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Gender Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ gender });\r\n    }\r\n\r\n    private setCountry = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const country = args.target.value;\r\n        if(country.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Country Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ country });\r\n    }\r\n\r\n    private setCity = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const city = args.target.value;\r\n        if(city.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"City Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ city });\r\n    }\r\n\r\n    private setStreet = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const street = args.target.value;\r\n        if(street.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Street Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ street });\r\n    }\r\n\r\n    private setPhone = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const phone = args.target.value;\r\n        if(phone.length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Phone Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ phone });\r\n    }\r\n\r\n    private setErrorMessage(err: any) {\r\n\r\n        let errorMessage = err;\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private setErrorToNull() {\r\n\r\n        let errorMessage = \"\";\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private editCustomer = async () => {\r\n        if (\r\n            this.state.firstName.length <= 0 ||\r\n            this.state.lastName.length <= 0 ||\r\n            this.state.email.length <= 0 ||\r\n            this.state.gender.length <= 0 ||\r\n            this.state.country.length <= 0 ||\r\n            this.state.city.length <= 0 ||\r\n            this.state.street.length <= 0 ||\r\n            this.state.phone.length <= 0) {\r\n            this.setErrorMessage(\"One Or More Of Your Field Are  Empty\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let editCustomerDetails = new EditCustomerDetails(this.state.id, this.state.firstName, this.state.lastName, this.state.email, this.state.gender, this.state.country, this.state.city, this.state.street, this.state.phone);\r\n            let response = await axios.put(\"http://localhost:3001/customers\", editCustomerDetails);\r\n            this.setErrorMessage(response.data);\r\n\r\n        }\r\n        catch (err) {\r\n            this.setErrorMessage(err)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n\r\n            const customersArr = JSON.parse(sessionStorage.getItem(\"customersArr\"));\r\n            let editCustomer = customersArr[JSON.parse(sessionStorage.getItem(\"customerArrPosition\"))]\r\n\r\n            let id = editCustomer.id;\r\n            let firstName = editCustomer.firstName;\r\n            let lastName = editCustomer.lastName;\r\n            let email = editCustomer.email;\r\n            let gender = editCustomer.gender;\r\n            let country = editCustomer.country;\r\n            let city = editCustomer.city;\r\n            let street = editCustomer.street;\r\n            let phone = editCustomer.phone;\r\n\r\n            this.setState({ id, firstName, lastName, email, gender, country, city, street, phone })\r\n            this.setErrorToNull();\r\n\r\n        } else {\r\n            alert(\"Access Denied\");\r\n            this.props.history.push('/home');\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <form>\r\n                        <h3>Edit Customer</h3>\r\n                        <div className=\"form-group\">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter First Name\" value={this.state.firstName} onChange={this.setFirstName} onFocus={this.setFirstName}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Last Name\" value={this.state.lastName} onChange={this.setLastName} onFocus={this.setLastName}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Enter Email\" value={this.state.email} onChange={this.setEmail} onFocus={this.setEmail}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Gender</label>\r\n                            <select className=\"form-control\" defaultValue={'DEFAULT'} onChange={this.setGender} onFocus={this.setGender}name=\"currency\" id=\"currency\" >\r\n                                <option value=\"DEFAULT\" disabled>--Please Select Gender--</option>\r\n                                <option value=\"Male\">Male</option>\r\n                                <option value=\"Female\">Female</option>\r\n\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Country</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Country\" value={this.state.country} onChange={this.setCountry} onFocus={this.setCountry}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>City</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter City\" value={this.state.city} onChange={this.setCity} onFocus={this.setCity}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Street</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Street\" value={this.state.street} onChange={this.setStreet} onFocus={this.setStreet}/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Phone</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Phone Number\" value={this.state.phone} onChange={this.setPhone} onFocus={this.setPhone}/>\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.editCustomer}>Edit Customer</button>\r\n\r\n                    </form>\r\n                    <NavLink className=\"backButton\" to=\"/customers\"></NavLink>\r\n\r\n\r\n\r\n                    <br />\r\n                    <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","export class EditTransactionDetails{\r\n    public constructor(\r\n        public id? :number,\r\n        public totalPrice?: number,\r\n        public currency?:string,\r\n        public creditCardType?:string,\r\n        public creditCardNumber?:string\r\n    ){}\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { EditTransactionDetails } from '../../models/EditTransactionDetails';\r\nimport { Transaction } from '../../models/Transaction';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface EditTransactionState {\r\n    id?: number,\r\n    totalPrice?: number,\r\n    currency?: string,\r\n    creditCardType?: string,\r\n    creditCardNumber?: string,\r\n    errorMessage: string,\r\n    transactions: Transaction[]\r\n}\r\n\r\nexport default class EditTransaction extends Component<any, EditTransactionState>{\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            id: 0,\r\n            totalPrice: 0,\r\n            currency: \"\",\r\n            creditCardType: \"\",\r\n            creditCardNumber: \"\",\r\n            errorMessage: \"\",\r\n            transactions: []\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    private setTotalPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const totalPrice = parseInt(args.target.value);\r\n        if(totalPrice.toString().length <= 0){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Total Price Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ totalPrice });\r\n    }\r\n\r\n    private setCurrency = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const currency = args.target.value;\r\n        this.setState({ currency });\r\n    }\r\n    private setcreditCardType = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const creditCardType = args.target.value;\r\n        this.setState({ creditCardType });\r\n    }\r\n    private setcreditCardNumber = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const creditCardNumber = args.target.value;\r\n        if(creditCardNumber.toString() === \"\"){\r\n            args.target.classList.add(\"errorEmpty\");\r\n            this.setErrorMessage(\"Credit Card Number Field Is Empty\");\r\n        }else{\r\n            args.target.classList.remove(\"errorEmpty\");\r\n            this.setErrorToNull();\r\n        }\r\n        this.setState({ creditCardNumber });\r\n    }\r\n    private setErrorMessage(err: any) {\r\n\r\n        let errorMessage = err;\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private setErrorToNull() {\r\n\r\n        let errorMessage = \"\";\r\n        this.setState({ errorMessage });\r\n\r\n    }\r\n\r\n    private editTransaction = async () => {\r\n        if (\r\n            this.state.totalPrice.toString().length <= 0 ||\r\n            this.state.currency.length <= 0 ||\r\n            this.state.creditCardType.length <= 0 ||\r\n            this.state.creditCardNumber.length <= 0) {\r\n            this.setErrorMessage(\"One Or More Of Your Field Are  Empty\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let editTransactionDetails = new EditTransactionDetails(this.state.id, this.state.totalPrice, this.state.currency, this.state.creditCardType, this.state.creditCardNumber);\r\n            let response = await axios.put(\"http://localhost:3001/transactions\", editTransactionDetails);\r\n            this.setErrorMessage(response.data);\r\n\r\n        }\r\n        catch (err) {\r\n            this.setErrorMessage(err)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n\r\n            const transactionsArr = JSON.parse(sessionStorage.getItem(\"transactionsArr\"));\r\n            let editTransaction = transactionsArr[JSON.parse(sessionStorage.getItem(\"transactionArrPosition\"))]\r\n\r\n            let id = editTransaction.id;\r\n            let totalPrice = editTransaction.totalPrice;\r\n            let currency = editTransaction.currency;\r\n            let creditCardType = editTransaction.creditCardType;\r\n            let creditCardNumber = editTransaction.creditCardNumber;\r\n\r\n            this.setState({ id, totalPrice, currency, creditCardType, creditCardNumber })\r\n            this.setErrorToNull();\r\n\r\n        } else {\r\n            alert(\"Access Denied\");\r\n            this.props.history.push('/home');\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <form>\r\n                        <h3>Edit Transaction</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Total Price</label>\r\n                            <input type=\"number\" className=\"form-control\" placeholder=\"Enter Total Price\" value={this.state.totalPrice} onChange={this.setTotalPrice} />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Currency</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter Currency\" value={this.state.currency} onChange={this.setCurrency} />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Cerdit Card Type</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter  Credit Card Type\" value={this.state.creditCardType} onChange={this.setcreditCardType} />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Cerdit Card Number</label>\r\n                            <input type=\"number\" className=\"form-control\" placeholder=\"Enter Credit Card Number\" value={this.state.creditCardNumber} onChange={this.setcreditCardNumber} />\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.editTransaction}>Edit Transaction</button>\r\n\r\n                    </form>\r\n                    <NavLink className=\"backButton\" to=\"/transactions\"></NavLink>\r\n\r\n\r\n\r\n                    <br />\r\n                    <p className=\"errorMessage\">{this.state.errorMessage}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './pagenotfound.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default class PageNotFound extends Component{\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"page-wrap d-flex flex-row align-items-center\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-12 text-center\">\r\n                        <span className=\"display-1 d-block\">404</span>\r\n                        <div className=\"mb-4 lead\">The page you are looking for was not found.</div>\r\n                        <NavLink className=\"btn btn-link\" to=\"/home\">Back to Home</NavLink>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport '../transactiontr/transactiontr.css';\r\n\r\ninterface TransactionTrProps {\r\n    id: number,\r\n    totalPrice: number,\r\n    currency: string,\r\n    creditCardType: string,\r\n    creditCardNumber: string,\r\n    customerId: number,\r\n    index: number,\r\n    onEditClicked: any,\r\n    onDeleteClicked: any,\r\n    onEditClickedNavigate: any\r\n\r\n}\r\n\r\nexport default class TransactionRr extends Component<TransactionTrProps>{\r\n\r\n    public constructor(props: TransactionTrProps) {\r\n\r\n        super(props);\r\n    }\r\n\r\n   \r\n    public render() {\r\n\r\n        return (\r\n\r\n            <tr id={this.props.id.toString()}>\r\n                <th scope=\"row\">{this.props.index}</th>\r\n                <td>{this.props.id}</td>\r\n                <td>{\"$\" + this.props.totalPrice}</td>\r\n                <td>{this.props.customerId}</td>\r\n                <td>{this.props.currency}</td>\r\n                <td>{this.props.creditCardType}</td>\r\n                <td>{this.props.creditCardNumber}</td>\r\n                <td>\r\n\r\n                    <label >\r\n                        <input className=\"deleteButton\" type=\"checkbox\" id={this.props.index.toString()} onChange={this.props.onEditClicked} onClick={this.props.onEditClickedNavigate} />\r\n                        <span className=\"editSpan\">\r\n                        </span>\r\n                    </label>\r\n                </td>\r\n\r\n                <td>\r\n                    <label >\r\n                        <input className=\"deleteButton\" type=\"checkbox\" onChange={this.props.onDeleteClicked} id={this.props.index.toString()}  />\r\n                        <span className=\"deleteSpan\">\r\n                        </span>\r\n                    </label>\r\n\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport axios from \"axios\";\r\nimport { Transaction } from '../../models/Transaction';\r\nimport TransactionTr from '../transactiontr/transactiontr'\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface TransactionState {\r\n    transactions: Transaction[];\r\n}\r\n\r\nexport default class Transactions extends Component<any, TransactionState> {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            transactions: []\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(\r\n\r\n            () => this.setState(\r\n                {\r\n                    transactions: store.getState().transactions\r\n                })\r\n        );\r\n\r\n    };\r\n\r\n    private goToEditTransaction = () => {\r\n        this.props.history.push('/edittransaction');\r\n    }\r\n\r\n    private editTransaction(args: ChangeEvent<HTMLInputElement>) {\r\n        sessionStorage.setItem(\"transactionId\", args.target.parentElement.parentElement.parentElement.id);\r\n        sessionStorage.setItem(\"transactionArrPosition\", args.target.id);\r\n\r\n    }\r\n\r\n    private async deleteTransaction(args: ChangeEvent<HTMLInputElement>) {\r\n\r\n        if (window.confirm('Are you sure you want to delete the selected transaction?')) {\r\n            let message = await axios.delete(\"http://localhost:3001/transactions/\" + args.target.parentElement.parentElement.parentElement.id);\r\n            const response = await axios.get<Transaction[]>(\"http://localhost:3001/transactions\");\r\n            store.dispatch({ type: ActionType.GetAllTransactions, payload: response.data });\r\n            window.confirm(message.data);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table table-hover table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">TransactionId</th>\r\n                            <th scope=\"col\">Total Price</th>\r\n                            <th scope=\"col\">CustomerId</th>\r\n                            <th scope=\"col\">Currency</th>\r\n                            <th scope=\"col\">creditCardType</th>\r\n                            <th scope=\"col\">creditCardNumber</th>\r\n                            <th scope=\"col\">Edit Transaction</th>\r\n                            <th scope=\"col\">Delete Transaction</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {\r\n                            this.state.transactions.map((transaction, index) =>\r\n\r\n\r\n\r\n                                <TransactionTr\r\n                                    key={transaction.id}\r\n                                    id={transaction.id}\r\n                                    totalPrice={transaction.totalPrice}\r\n                                    currency={transaction.currency}\r\n                                    creditCardType={transaction.creditCardType}\r\n                                    creditCardNumber={transaction.creditCardNumber}\r\n                                    customerId={transaction.customerId}\r\n                                    index={index}\r\n                                    onEditClicked={this.editTransaction}\r\n                                    onEditClickedNavigate={this.goToEditTransaction}\r\n                                    onDeleteClicked={this.deleteTransaction}\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            \r\n                <NavLink to=\"/createtransaction\">Create New Transaction</NavLink>\r\n                <br/>\r\n                <NavLink to=\"/customers\">Customers List</NavLink>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeStore();\r\n        store.dispatch({ type: ActionType.DESTROY_SESSION });\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n        // Check if the user login\r\n        if (JSON.parse(sessionStorage.getItem(\"isLoggedIn\"))) {\r\n\r\n            // Set token as default on header when there is an http request\r\n            axios.defaults.headers.common['Authorization'] = sessionStorage.getItem(\"userToken\");\r\n\r\n            // Get all transactions from database vacationtag table\r\n\r\n            const response = await axios.get<Transaction[]>(\"http://localhost:3001/transactions\");\r\n            // Set transactions on redux as array\r\n            sessionStorage.setItem(\"transactionsArr\",JSON.stringify(response.data));\r\n\r\n            store.dispatch({ type: ActionType.GetAllTransactions, payload: response.data });\r\n\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter, Redirect } from \"react-router-dom\";\r\nimport Login from '../../components/login/login';\r\nimport CreateCustomer from '../createCustomer/createCustomer';\r\nimport CreateTransaction from '../createTransaction/createTransaction';\r\nimport Customers from '../customers/customers';\r\nimport EditCustomer from '../editCustomer/editCustomer';\r\nimport EditTransaction from '../editTransaction/editTransaction';\r\nimport PageNotFound from '../pagenotfound/pagenotfound';\r\nimport Transactions from '../transactions/transactions';\r\n\r\nexport default class Layout extends Component {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n\r\n\r\n                <Switch>\r\n                    <Route path=\"/home\" component={Login} exact />\r\n                    <Route path=\"/customers\" component={Customers} exact />\r\n                    <Route path=\"/editcustomer\" component={EditCustomer} exact />\r\n                    <Route path=\"/createcustomer\" component={CreateCustomer} exact />\r\n                    <Route path=\"/transactions\" component={Transactions} exact />\r\n                    <Route path=\"/edittransaction\" component={EditTransaction} exact />\r\n                    <Route path=\"/createtransaction\" component={CreateTransaction} exact />\r\n                    <Redirect from=\"/\" to=\"/home\" exact />\r\n\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n\r\n            </BrowserRouter>\r\n\r\n        );\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './components/layout/layout';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Layout />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}